{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildDeprecatedPropsWarning, useDefaultDates, useLocaleText, useUtils, parseNonNullablePickerDate } from '@mui/x-date-pickers/internals';\nimport { useThemeProps } from '@mui/material/styles';\nimport { parseRangeInputValue } from '../internal/utils/date-utils';\nconst deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');\nexport function useDateRangePickerDefaultizedProps(props, name) {\n  var _themeProps$startText, _themeProps$endText;\n  const utils = useUtils();\n  const defaultDates = useDefaultDates(); // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  deprecatedPropsWarning({\n    startText: themeProps.startText,\n    endText: themeProps.endText\n  });\n  const localeText = useLocaleText();\n  const startText = (_themeProps$startText = themeProps.startText) != null ? _themeProps$startText : localeText.start;\n  const endText = (_themeProps$endText = themeProps.endText) != null ? _themeProps$endText : localeText.end;\n  return _extends({\n    disableFuture: false,\n    disablePast: false,\n    calendars: 2,\n    inputFormat: utils.formats.keyboardDate\n  }, themeProps, {\n    endText,\n    startText,\n    minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),\n    maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)\n  });\n}\nexport const dateRangePickerValueManager = {\n  emptyValue: [null, null],\n  getTodayValue: utils => [utils.date(), utils.date()],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};","map":{"version":3,"names":["_extends","buildDeprecatedPropsWarning","useDefaultDates","useLocaleText","useUtils","parseNonNullablePickerDate","useThemeProps","parseRangeInputValue","deprecatedPropsWarning","useDateRangePickerDefaultizedProps","props","name","_themeProps$startText","_themeProps$endText","utils","defaultDates","themeProps","startText","endText","localeText","start","end","disableFuture","disablePast","calendars","inputFormat","formats","keyboardDate","minDate","maxDate","dateRangePickerValueManager","emptyValue","getTodayValue","date","parseInput","areValuesEqual","a","b","isEqual"],"sources":["/Users/chiaqiyang/Desktop/DoubleC-main/client/node_modules/@mui/x-date-pickers-pro/DateRangePicker/shared.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildDeprecatedPropsWarning, useDefaultDates, useLocaleText, useUtils, parseNonNullablePickerDate } from '@mui/x-date-pickers/internals';\nimport { useThemeProps } from '@mui/material/styles';\nimport { parseRangeInputValue } from '../internal/utils/date-utils';\nconst deprecatedPropsWarning = buildDeprecatedPropsWarning('Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.');\nexport function useDateRangePickerDefaultizedProps(props, name) {\n  var _themeProps$startText, _themeProps$endText;\n\n  const utils = useUtils();\n  const defaultDates = useDefaultDates(); // This is technically unsound if the type parameters appear in optional props.\n  // Optional props can be filled by `useThemeProps` with types that don't match the type parameters.\n\n  const themeProps = useThemeProps({\n    props,\n    name\n  });\n  deprecatedPropsWarning({\n    startText: themeProps.startText,\n    endText: themeProps.endText\n  });\n  const localeText = useLocaleText();\n  const startText = (_themeProps$startText = themeProps.startText) != null ? _themeProps$startText : localeText.start;\n  const endText = (_themeProps$endText = themeProps.endText) != null ? _themeProps$endText : localeText.end;\n  return _extends({\n    disableFuture: false,\n    disablePast: false,\n    calendars: 2,\n    inputFormat: utils.formats.keyboardDate\n  }, themeProps, {\n    endText,\n    startText,\n    minDate: parseNonNullablePickerDate(utils, themeProps.minDate, defaultDates.minDate),\n    maxDate: parseNonNullablePickerDate(utils, themeProps.maxDate, defaultDates.maxDate)\n  });\n}\nexport const dateRangePickerValueManager = {\n  emptyValue: [null, null],\n  getTodayValue: utils => [utils.date(), utils.date()],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,2BAA2B,EAAEC,eAAe,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,0BAA0B,QAAQ,+BAA+B;AACjJ,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,MAAMC,sBAAsB,GAAGP,2BAA2B,CAAC,mHAAmH,CAAC;AAC/K,OAAO,SAASQ,kCAAkC,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC9D,IAAIC,qBAAqB,EAAEC,mBAAmB;EAE9C,MAAMC,KAAK,GAAGV,QAAQ,EAAE;EACxB,MAAMW,YAAY,GAAGb,eAAe,EAAE,CAAC,CAAC;EACxC;;EAEA,MAAMc,UAAU,GAAGV,aAAa,CAAC;IAC/BI,KAAK;IACLC;EACF,CAAC,CAAC;EACFH,sBAAsB,CAAC;IACrBS,SAAS,EAAED,UAAU,CAACC,SAAS;IAC/BC,OAAO,EAAEF,UAAU,CAACE;EACtB,CAAC,CAAC;EACF,MAAMC,UAAU,GAAGhB,aAAa,EAAE;EAClC,MAAMc,SAAS,GAAG,CAACL,qBAAqB,GAAGI,UAAU,CAACC,SAAS,KAAK,IAAI,GAAGL,qBAAqB,GAAGO,UAAU,CAACC,KAAK;EACnH,MAAMF,OAAO,GAAG,CAACL,mBAAmB,GAAGG,UAAU,CAACE,OAAO,KAAK,IAAI,GAAGL,mBAAmB,GAAGM,UAAU,CAACE,GAAG;EACzG,OAAOrB,QAAQ,CAAC;IACdsB,aAAa,EAAE,KAAK;IACpBC,WAAW,EAAE,KAAK;IAClBC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAEX,KAAK,CAACY,OAAO,CAACC;EAC7B,CAAC,EAAEX,UAAU,EAAE;IACbE,OAAO;IACPD,SAAS;IACTW,OAAO,EAAEvB,0BAA0B,CAACS,KAAK,EAAEE,UAAU,CAACY,OAAO,EAAEb,YAAY,CAACa,OAAO,CAAC;IACpFC,OAAO,EAAExB,0BAA0B,CAACS,KAAK,EAAEE,UAAU,CAACa,OAAO,EAAEd,YAAY,CAACc,OAAO;EACrF,CAAC,CAAC;AACJ;AACA,OAAO,MAAMC,2BAA2B,GAAG;EACzCC,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;EACxBC,aAAa,EAAElB,KAAK,IAAI,CAACA,KAAK,CAACmB,IAAI,EAAE,EAAEnB,KAAK,CAACmB,IAAI,EAAE,CAAC;EACpDC,UAAU,EAAE3B,oBAAoB;EAChC4B,cAAc,EAAE,CAACrB,KAAK,EAAEsB,CAAC,EAAEC,CAAC,KAAKvB,KAAK,CAACwB,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIvB,KAAK,CAACwB,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC;AACxF,CAAC"},"metadata":{},"sourceType":"module"}