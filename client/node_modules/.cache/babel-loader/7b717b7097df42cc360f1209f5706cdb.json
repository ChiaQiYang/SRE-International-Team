{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"value\", \"onChange\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport { MobileWrapper, usePickerState } from '@mui/x-date-pickers/internals';\nimport { useDateRangeValidation } from '../internal/hooks/validation/useDateRangeValidation';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { DateRangePickerInput } from '../DateRangePicker/DateRangePickerInput';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { useDateRangePickerDefaultizedProps, dateRangePickerValueManager } from '../DateRangePicker/shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst PureDateInputComponent = DateRangePickerInput;\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://mui.com/x/api/date-pickers/mobile-date-range-picker/)\n */\nexport const MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n  const props = useDateRangePickerDefaultizedProps(inProps, 'MuiMobileDateRangePicker');\n  const {\n      value,\n      onChange,\n      components,\n      componentsProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, dateRangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n  const DateInputProps = _extends({}, inputProps, other, {\n    components,\n    componentsProps,\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    validationError,\n    ref,\n    mobile: true\n  });\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    components: components,\n    componentsProps: componentsProps,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd\n    }, pickerProps, {\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useLicenseVerifier","MobileWrapper","usePickerState","useDateRangeValidation","DateRangePickerView","DateRangePickerInput","getReleaseInfo","useDateRangePickerDefaultizedProps","dateRangePickerValueManager","jsx","_jsx","releaseInfo","PureDateInputComponent","MobileDateRangePicker","forwardRef","inProps","ref","props","value","onChange","components","componentsProps","other","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","mobile","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","calendars","oneOf","node","className","string","closeOnSelect","object","dayOfWeekFormatter","func","defaultCalendarMonth","any","DialogProps","disableAutoMonthSwitching","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","endText","getOpenDialogAriaText","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","startText","toolbarFormat","toolbarTitle","arrayOf"],"sources":["/Users/chiaqiyang/Desktop/DoubleC-main/client/node_modules/@mui/x-date-pickers-pro/MobileDateRangePicker/MobileDateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"value\", \"onChange\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport { MobileWrapper, usePickerState } from '@mui/x-date-pickers/internals';\nimport { useDateRangeValidation } from '../internal/hooks/validation/useDateRangeValidation';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport { DateRangePickerInput } from '../DateRangePicker/DateRangePickerInput';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { useDateRangePickerDefaultizedProps, dateRangePickerValueManager } from '../DateRangePicker/shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\nconst PureDateInputComponent = DateRangePickerInput;\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://mui.com/x/api/date-pickers/mobile-date-range-picker/)\n */\nexport const MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n  const props = useDateRangePickerDefaultizedProps(inProps, 'MuiMobileDateRangePicker');\n\n  const {\n    value,\n    onChange,\n    components,\n    componentsProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, dateRangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    components,\n    componentsProps,\n    currentlySelectingRangeEnd,\n    setCurrentlySelectingRangeEnd,\n    validationError,\n    ref,\n    mobile: true\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    components: components,\n    componentsProps: componentsProps,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd\n    }, pickerProps, {\n      components: components,\n      componentsProps: componentsProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;"],"mappings":"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IAAI;EAErB;AACF;AACA;AACA;EACE6B,mBAAmB,EAAE5E,SAAS,CAACiD,MAAM;EAErC;AACF;AACA;AACA;AACA;EACE4B,OAAO,EAAE7E,SAAS,CAAC4C,IAAI;EAEvB;AACF;AACA;AACA;EACEkC,IAAI,EAAE9E,SAAS,CAACiD,MAAM;EAEtB;AACF;AACA;EACE8B,OAAO,EAAE/E,SAAS,CAACuD,GAAG;EAEtB;AACF;AACA;EACEyB,OAAO,EAAEhF,SAAS,CAACuD,GAAG;EAEtB;AACF;AACA;AACA;AACA;EACE0B,QAAQ,EAAEjF,SAAS,CAACqD,IAAI;EAExB;AACF;AACA;AACA;AACA;AACA;EACEjC,QAAQ,EAAEpB,SAAS,CAACqD,IAAI,CAAC6B,UAAU;EAEnC;AACF;AACA;AACA;EACEC,OAAO,EAAEnF,SAAS,CAACqD,IAAI;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE+B,OAAO,EAAEpF,SAAS,CAACqD,IAAI;EAEvB;AACF;AACA;AACA;AACA;AACA;EACEgC,aAAa,EAAErF,SAAS,CAACqD,IAAI;EAE7B;AACF;AACA;AACA;EACEiC,MAAM,EAAEtF,SAAS,CAACqD,IAAI;EAEtB;AACF;AACA;AACA;EACEkC,YAAY,EAAEvF,SAAS,CAACqD,IAAI;EAE5B;AACF;AACA;EACElB,IAAI,EAAEnC,SAAS,CAAC4C,IAAI;EAEpB;AACF;AACA;EACE4C,qBAAqB,EAAExF,SAAS,CAACmD,MAAM;EAEvC;AACF;AACA;AACA;EACEsC,QAAQ,EAAEzF,SAAS,CAAC4C,IAAI;EAExB;AACF;AACA;AACA;EACE8C,gBAAgB,EAAE1F,SAAS,CAAC4C,IAAI;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE+C,SAAS,EAAE3F,SAAS,CAACqD,IAAI;EAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEuC,WAAW,EAAE5F,SAAS,CAACqD,IAAI,CAAC6B,UAAU;EAEtC;AACF;AACA;AACA;AACA;EACEW,aAAa,EAAE7F,SAAS,CAACqD,IAAI;EAE7B;AACF;AACA;AACA;AACA;EACEyC,aAAa,EAAE9F,SAAS,CAACqD,IAAI;EAE7B;AACF;AACA;AACA;EACE0C,oBAAoB,EAAE/F,SAAS,CAACiD,MAAM;EAEtC;AACF;AACA;AACA;AACA;AACA;AACA;EACE+C,iBAAiB,EAAEhG,SAAS,CAACqD,IAAI;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE4C,kBAAkB,EAAEjG,SAAS,CAACqD,IAAI;EAElC;AACF;AACA;AACA;AACA;AACA;AACA;EACE6C,iBAAiB,EAAElG,SAAS,CAACqD,IAAI;EAEjC;AACF;AACA;AACA;EACE8C,2BAA2B,EAAEnG,SAAS,CAAC4C,IAAI;EAE3C;AACF;AACA;EACEwD,WAAW,EAAEpG,SAAS,CAAC4C,IAAI;EAE3B;AACF;AACA;AACA;AACA;EACEyD,SAAS,EAAErG,SAAS,CAAC+C,IAAI;EAEzB;AACF;AACA;EACEuD,aAAa,EAAEtG,SAAS,CAACiD,MAAM;EAE/B;AACF;AACA;AACA;EACEsD,YAAY,EAAEvG,SAAS,CAAC+C,IAAI;EAE5B;AACF;AACA;EACE5B,KAAK,EAAEnB,SAAS,CAACwG,OAAO,CAACxG,SAAS,CAACuD,GAAG,CAAC,CAAC2B;AAC1C,CAAC,GAAG,KAAK,CAAC"},"metadata":{},"sourceType":"module"}