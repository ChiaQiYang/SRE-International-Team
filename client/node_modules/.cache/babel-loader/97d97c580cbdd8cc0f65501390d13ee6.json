{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"PaperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n  const {\n      desktopModeMediaQuery = '@media (pointer: fine)',\n      DialogProps,\n      PopperProps,\n      PaperProps,\n      TransitionComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref,\n      PopperProps: PopperProps,\n      PaperProps: PaperProps,\n      TransitionComponent: TransitionComponent\n    }, other));\n  }\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref,\n    DialogProps: DialogProps\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useThemeProps","useLicenseVerifier","useMediaQuery","getReleaseInfo","DesktopDateRangePicker","MobileDateRangePicker","jsx","_jsx","releaseInfo","DateRangePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","DialogProps","PopperProps","PaperProps","TransitionComponent","other","isDesktop","defaultMatches","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","calendars","oneOf","children","node","className","string","closeOnSelect","components","object","componentsProps","dayOfWeekFormatter","func","defaultCalendarMonth","any","disableAutoMonthSwitching","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","endText","getOpenDialogAriaText","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","open","OpenPickerButtonProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","startText","toolbarFormat","toolbarTitle","elementType","value","arrayOf"],"sources":["/Users/chiaqiyang/Desktop/DoubleC-main/client/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"PaperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n\n  const {\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    PopperProps,\n    PaperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded); // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)\n\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery, {\n    defaultMatches: true\n  });\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref,\n      PopperProps: PopperProps,\n      PaperProps: PaperProps,\n      TransitionComponent: TransitionComponent\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref,\n    DialogProps: DialogProps\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\n   * Overrideable components.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Formats the day of week displayed in the calendar header.\n   * @param {string} day The day of week provided by the adapter's method `getWeekdays`.\n   * @returns {string} The name to display.\n   * @default (day) => day.charAt(0).toUpperCase()\n   */\n  dayOfWeekFormatter: PropTypes.func,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\n   * @default '@media (pointer: fine)'\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true` future days are disabled.\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, today's date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * If `true` past days are disabled.\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TInputDate, TDate\n   * @param {TInputDate} date The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   * @deprecated\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Maximal selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Minimal selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TValue\n   * @param {TValue} value The value that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date range.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TInputValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TInputValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change @DateIOType.\n   * @template TDate\n   * @param {TDate} month The new month.\n   * @returns {void|Promise} -\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n   */\n  PopperProps: PropTypes.object,\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\n   * @returns {React.ReactElement} The range input to render.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   * @deprecated\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to test.\n   * @param {string} position The date to test, 'start' or 'end'.\n   * @returns {boolean} Returns `true` if the date should be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific months dynamically.\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} month The month to check.\n   * @returns {boolean} If `true` the month will be disabled.\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Returns `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization/.\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date range'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;"],"mappings":"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"},"metadata":{},"sourceType":"module"}